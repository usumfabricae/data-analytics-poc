AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  RepositoryName:
    Type: String
    Default: gluedemocicd
  liveTestStackName:
    Type: String
    Default: gluedemocicdtest
  productionStackName:
    Type: String
    Default: gluedemocicdprod
Resources:
  Repository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: repo for demo Glue ETL
      RepositoryName: !Ref 'RepositoryName'
  CodePipelineBucket:
    Type: AWS::S3::Bucket
  liveTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/python:2.7.12
        Type: LINUX_CONTAINER
      Name: !Sub '${AWS::StackName}LT'
      ServiceRole: !GetAtt 'CodeBuildServiceRole.Arn'
      Source:
        BuildSpec: !Join [" ",["version: 0.2\n\nphases:\n  build:\n    commands:\n      pip install boto3 && python datalakelive_tst.py ",!Ref liveTestStackName]]
        Type: CODEPIPELINE        
  firstcommitter:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/python:2.7.12
        Type: LINUX_CONTAINER
      Name: !Sub '${AWS::StackName}initCommit'
      ServiceRole: !GetAtt 'CodePipelineServiceRole.Arn'
      Source:
        BuildSpec: !Join [" ",["version: 0.2\n\nphases:\n  build:\n    commands:\n      git config --global user.email 'you@example.com' && git config --global push.default simple && pip install boto3 && python commitSample.py",!Ref 'GitUser', !Ref 'RepositoryName']]
        Type: S3
        Location: !Join ["/", [!Ref 'CodePipelineBucket' ,"gluedemoetl.zip"]]

  pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref 'CodePipelineBucket'
      RoleArn: !GetAtt 'CodePipelineServiceRole.Arn'
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: '1'
            Provider: CodeCommit
          OutputArtifacts:
          - Name: appsource
          Configuration:
            BranchName: master
            RepositoryName: !Ref 'RepositoryName'
          RunOrder: 1
      - Name: LiveTest
        Actions:
        - Name: deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          InputArtifacts:
          - Name: appsource
          OutputArtifacts:
          - Name: QADeployStack
          Configuration:
            StackName: !Ref liveTestStackName
            ActionMode: CREATE_UPDATE
            TemplatePath: appsource::gluedatalake.yaml
            Capabilities: CAPABILITY_IAM
            ParameterOverrides: "{\"BucketName\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"BucketName\"]}, \"EnvType\":\"test\",\r\n\"ObjectKey\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"ObjectKey\"]}}"
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
          RunOrder: 1
        - Name: AutomatedLiveTest
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          InputArtifacts:
          - Name: appsource
          Configuration:
            ProjectName: !Ref 'liveTest'
          RunOrder: 2
        - Name: LiveTestApproval
          ActionTypeId:
            Category: Approval
            Owner: AWS
            Version: '1'
            Provider: Manual
          RunOrder: 3          
        - Name: LiveTestCleanup
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          Configuration:
            StackName: !Ref liveTestStackName
            ActionMode: DELETE_ONLY
            TemplatePath: appsource::gluedatalake.yaml
            Capabilities: CAPABILITY_IAM
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
          RunOrder: 4   
      - Name: ProductionDeploy
        Actions:
        - Name: deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          InputArtifacts:
          - Name: appsource
          Configuration:
            StackName: !Ref productionStackName
            ActionMode: CREATE_UPDATE
            TemplatePath: appsource::gluedatalake.yaml
            Capabilities: CAPABILITY_IAM
            ParameterOverrides: "{\"BucketName\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"BucketName\"]}, \"EnvType\":\"prod\",\r\n\"ObjectKey\":{\"Fn::GetArtifactAtt\":[\"appsource\"\
              ,\"ObjectKey\"]}}"
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
          RunOrder: 1

  DeleteBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 's3LambdaCopyRole.Arn'
      Runtime: "python2.7"
      Timeout: 900
      Handler: "index.handler"
      Code: 
        ZipFile: |
         import cfnresponse
         import boto3
         from botocore.client import Config
         import zipfile
         def handler(event, context):
            client = boto3.client('s3')
            destinationbucket = event['ResourceProperties']['bucketName']
            if event['RequestType'] == 'Delete':
               s3 = boto3.resource('s3')
               bucket = s3.Bucket(destinationbucket)
               for key in bucket.objects.all():
                  client.delete_object(Bucket=destinationbucket,  Key=key.key)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
  DeleteBucket:
    Type: Custom::DeleteBucket
    DependsOn: CodePipelineBucket
    Properties:
      ServiceToken: !GetAtt DeleteBucketFunction.Arn
      bucketName: !Ref 'CodePipelineBucket'

  triggerInitialCommitF:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 's3LambdaCopyRole.Arn'
      Runtime: "python2.7"
      Timeout: 300
      Handler: "index.handler"
      Code: 
        ZipFile: |
         import cfnresponse
         import boto3
         from botocore.client import Config
         import zipfile
         def handler(event, context):
            client = boto3.client('codebuild')
            jobname = event['ResourceProperties']['jobname']
            if event['RequestType'] == 'Create':
              client.start_build(projectName=jobname)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")                        
  triggerInitialCommit:
    Type: Custom::triggerInitialCommit
    DependsOn: Repository
    Properties:
      ServiceToken: !GetAtt triggerInitialCommitF.Arn
      jobname: !Ref firstcommitter

  CopyLambdasFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 's3LambdaCopyRole.Arn'
      Runtime: "python2.7"
      Timeout: 300
      Handler: "index.handler"
      Code: 
        ZipFile: |
         import cfnresponse
         import boto3
         from botocore.client import Config
         import zipfile
         def handler(event, context):
            client = boto3.client('s3')
            destinationbucket = event['ResourceProperties']['destinationBucketName']
            sourceBucket = event['ResourceProperties']['sourceBucketName']
            objectKey = event['ResourceProperties']['objectKey']
            if event['RequestType'] != 'Delete':
               s3 = boto3.client('s3')
               s3.copy({ 'Bucket': sourceBucket, 'Key': objectKey}, destinationbucket, objectKey)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")                        

  DeleteCFFunction:
    Type: AWS::Lambda::Function
    DependsOn: CloudFormationRole
    Properties:
      Role: !GetAtt 's3LambdaCopyRole.Arn'
      Runtime: "python2.7"
      Timeout: 900
      Handler: "index.lambda_handler"
      Code: 
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          cf = boto3.client('cloudformation')
          def lambda_handler(event, context):
              if event['RequestType'] == 'Delete':
                try:
                    stackname = event['ResourceProperties']['stackName']
                    response = cf.delete_stack(StackName=stackname)
                except Exception as e:
                    print('stack deletion due to exception. stackname: ' + stackname) 
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CustomResourcePhysicalID")
                try:                  
                    cf.describe_stacks(StackName=stackname)
                    time.sleep(240)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
                except Exception as e:
                    print('describe_stacks due to exception. stackname: ' + stackname) 
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              return "Success"

  DeleteLiveTestCF:
    Type: Custom::DeleteLiveTestCF
    Properties:
      ServiceToken: !GetAtt DeleteCFFunction.Arn
      stackName: !Ref 'liveTestStackName'

  DeleteprodCF:
    Type: Custom::DeleteLiveTestCF
    Properties:
      ServiceToken: !GetAtt DeleteCFFunction.Arn
      stackName: !Ref 'productionStackName'

  CloudFormationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for cloudformation to create resources
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - iam:CreateRole
          - iam:CreatePolicy
          - iam:GetRole
          - iam:DeleteRole
          - iam:PutRolePolicy
          - iam:DeleteRolePolicy
          - iam:AttachRolePolicy
          - iam:DetachRolePolicy
          - lambda:CreateFunction
          - lambda:DeleteFunction
          - lambda:InvokeFunction
          - lambda:UpdateFunctionCode 
          - lambda:UpdateFunctionConfiguration
          - lambda:GetFunction
          - lambda:GetFunctionConfiguration
          Resource: '*'
          Effect: Allow
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: 
          - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${liveTestStackName}-*'
          - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${productionStackName}-*'
          
  S3Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for creating working with s3 buckets
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          Resource: 
          - !Sub 'arn:aws:s3:::${CodePipelineBucket}/*'
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetObject
          Resource: 
          - arn:aws:s3:::lfcarocomdemo/*
          - arn:aws:s3:::lfcarocomdemo
          - !Sub 'arn:aws:s3:::${CodePipelineBucket}/*'
          - !Sub 'arn:aws:s3:::${CodePipelineBucket}'
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:CreateBucket
          - s3:DeleteBucket
          - s3:Delete*
          - s3:GetBucketLocation
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:ListMultipartUploadParts
          - s3:AbortMultipartUpload
          Resource: 
          - !Sub 'arn:aws:s3:::${liveTestStackName}*'
          - !Sub 'arn:aws:s3:::${productionStackName}*'
        - Effect: Allow
          Action:
          - CloudFormation:DeleteStack
          - CloudFormation:DescribeStacks 
          Resource: 
          - !Sub 'arn:aws:cloudformation:*:*:stack/${liveTestStackName}*'
          - !Sub 'arn:aws:cloudformation:*:*:stack/${productionStackName}*'

  testJobPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for testing job run
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - glue:CreateDatabase
          - glue:DeleteDatabase
          - glue:GetCrawler
          - glue:GetCrawlers
          - glue:GetDatabase
          - glue:GetDatabases
          - glue:StartCrawler
          - glue:StartJobRun
          - glue:GetJobRun
          - glue:GetTable
          - glue:GetTables
          - glue:GetPartition
          - glue:GetPartitions
          - glue:BatchGetPartition
          - athena:StartQueryExecution
          Resource: 
          - '*'

  gituserpolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for git user
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - codecommit:BatchGetRepositories
          - codecommit:Get*
          - codecommit:List*
          - codecommit:CreateBranch
          - codecommit:Put*
          - codecommit:Test*
          - codecommit:Update*
          - codecommit:GitPull
          - codecommit:GitPush
          Resource: '*'
          Effect: Allow 


  codePipelinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for code pipeline
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          - codecommit:PutFile
          - lambda:InvokeFunction
          - lambda:ListFunctions
          - cloudformation:CreateStack
          - cloudformation:DescribeStacks
          - cloudformation:UpdateStack
          - cloudformation:CreateChangeSet
          - cloudformation:DeleteChangeSet
          - cloudformation:DescribeChangeSet
          - cloudformation:ExecuteChangeSet
          - cloudformation:SetStackPolicy
          - cloudformation:ValidateTemplate
          - cloudformation:DescribeStackResources
          - codepipeline:PutJobFailureResult
          - codepipeline:PutJobSuccessResult
          - codecommit:BatchGetRepositories
          - codecommit:Get*
          - codecommit:List*
          - codecommit:CreateBranch
          - codecommit:Put*
          - codecommit:Test*
          - codecommit:Update*
          - codecommit:GitPull
          - codecommit:GitPush    
          - iam:GetRole        
          - iam:ListRoles
          - iam:GetPolicy
          - iam:GetInstanceProfile
          - iam:GetPolicyVersion
          Resource: 
          - '*'
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: 
          - !GetAtt 'CloudFormationRole.Arn'
        - Action:
          - iam:CreateServiceSpecificCredential
          - iam:ListServiceSpecificCredentials
          - iam:UpdateServiceSpecificCredential
          - iam:DeleteServiceSpecificCredential
          - iam:ResetServiceSpecificCredential
          Resource: !GetAtt 'GitUser.Arn'
          Effect: Allow 



  s3LambdaCopyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - !Ref S3Policy
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - !Ref S3Policy
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - !Ref testJobPolicy
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AdministratorAccess


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - !Ref S3Policy
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - !Ref codePipelinePolicy
      - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess



  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - !Ref S3Policy
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - !Ref CloudFormationPolicy
      - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      - arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin
      

  GitUser:
    Type: "AWS::IAM::User"
    Properties: 
            ManagedPolicyArns:
            - !Ref gituserpolicy
                       
Outputs:
  PipelineName:
    Value: !Ref 'pipeline'
